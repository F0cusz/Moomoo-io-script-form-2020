// ==UserScript==
// @name         SmokMod
// @namespace    -
// @version     v2
// @description Smok On The Top
// @author      Smok Is Op
// @match        *://moomoo.io/*
// @match        *://sandbox.moomoo.io/*
// @require https://greasyfork.org/scripts/368273-msgpack/code/msgpack.js?version=598723
// @require http://code.jquery.com/jquery-3.3.1.min.js
// @require https://code.jquery.com/ui/1.12.0/jquery-ui.min.js
// @require https://cdnjs.cloudflare.com/ajax/libs/jquery-confirm/3.3.0/jquery-confirm.min.js
// @grant        none
// ==/UserScript==

$("#consentBlock").css({display: "none"});
//$("#youtuberOf").css({display: "none"});
$("#mapDisplay").css({background: `url('https://i.imgur.com/fgFsQJp.png')`});

document.getElementById("moomooio_728x90_home").style.display = "none";
$("#moomooio_728x90_home").parent().css({display: "none"});

window.onbeforeunload = null;

let mouseX;
let mouseY;

let width;
let height;

setInterval(() => {
   if(clanToggle == 1) {
        doNewSend(["9", [null]]);
        doNewSend(["8", [animate(false, 5)]])
    }
    doNewSend(["testing", [6]]);
}, 200);

setInterval(() => {
    if(messageToggle == 1) {
        doNewSend(["ch", [animate(true, 5)]])
    }
}, 200);

setInterval(() => {
    if(autoaim == true) {
        doNewSend(["2", [nearestEnemyAngle]]);
    }
}, 0);

setInterval(() => {
    if(hatToggle == 1) {
        if(oldHat != normalHat) {
            hat(normalHat);
            console.log("Tried. - Hat")
        }
        if(oldAcc != normalAcc) {
            acc(normalAcc);
            console.log("Tried. - Acc")
        }
        oldHat = normalHat;
        oldAcc = normalAcc
    }
}, 25);

function normal() {
    hat(normalHat);
    acc(normalAcc);
}

function aim(x, y){
     var cvs = document.getElementById("gameCanvas");
     cvs.dispatchEvent(new MouseEvent("mousemove", {
         clientX: x,
         clientY: y

     }));
}

let coreURL = new URL(window.location.href);
window.sessionStorage.force = coreURL.searchParams.get("fc");

var nearestEnemy;
var nearestEnemyAngle;
var isEnemyNear;
var instaSpeed = 270;
var primary;
var secondary;
var foodType;
var wallType;
var spikeType;
var millType;
var mineType;
var boostType;
var turretType;
var spawnpadType;
var autoaim = false;
var tick = 1;
var oldHat;
var oldAcc;
var enemiesNear;
var normalHat;
var normalAcc;
var ws;
var msgpack5 = msgpack;
var boostDir;
let myPlayer = {
    id: null,
    x: null,
    y: null,
    dir: null,
    object: null,
    weapon: null,
    clan: null,
    isLeader: null,
    hat: null,
    accessory: null,
    isSkull: null
};

let healSpeed = 54;true
var messageToggle = 0;
var clanToggle = 0;
let healToggle = 1;
let hatToggle = 1;

document.msgpack = msgpack;
function n(){
     this.buffer = new Uint8Array([0]);
     this.buffer.__proto__ = new Uint8Array;
     this.type = 0;
}

WebSocket.prototype.oldSend = WebSocket.prototype.send;
WebSocket.prototype.send = function(m){
    if (!ws){
        document.ws = this;

        ws = this;
        socketFound(this);
    }
    this.oldSend(m);
};


function socketFound(socket){
    socket.addEventListener('message', function(message){
        handleMessage(message);
    });
}

function handleMessage(m){
    let temp = msgpack5.decode(new Uint8Array(m.data));
    let data;
    if(temp.length > 1) {
        data = [temp[0], ...temp[1]];
        if (data[1] instanceof Array){
            data = data;
        }
    } else {
      data = temp;
    }
    let item = data[0];
    if(!data) {return};

    if(item === "io-init") {
            let cvs = document.getElementById("gameCanvas");
            width = cvs.clientWidth;
            height = cvs.clientHeight;
            $(window).resize(function() {
                width = cvs.clientWidth;
                height = cvs.clientHeight;
            });
            cvs.addEventListener("mousemove", e => {
                mouseX = e.clientX;
                mouseY = e.clientY;
            });
        }

    if (item == "1" && myPlayer.id == null){
        myPlayer.id = data[1];
    }

    if (item == "33") {
        enemiesNear = [];
        for(let i = 0; i < data[1].length / 13; i++) {
            let playerInfo = data[1].slice(13*i, 13*i+13);
            if(playerInfo[0] == myPlayer.id) {
                myPlayer.x = playerInfo[1];
                myPlayer.y = playerInfo[2];
                myPlayer.dir = playerInfo[3];
                myPlayer.object = playerInfo[4];
                myPlayer.weapon = playerInfo[5];
                myPlayer.clan = playerInfo[7];
                myPlayer.isLeader = playerInfo[8];
                myPlayer.hat = playerInfo[9];
                myPlayer.accessory = playerInfo[10];
                myPlayer.isSkull = playerInfo[11];
            } else if(playerInfo[7] != myPlayer.clan || playerInfo[7] === null) {
                enemiesNear.push(playerInfo);
            }
        }
    }

    isEnemyNear = false;
    if(enemiesNear) {
        nearestEnemy = enemiesNear.sort((a,b) => dist(a, myPlayer) - dist(b, myPlayer))[0];
    }

    if(nearestEnemy) {
        nearestEnemyAngle = Math.atan2(nearestEnemy[2]-myPlayer.y, nearestEnemy[1]-myPlayer.x);
        if(Math.sqrt(Math.pow((myPlayer.y-nearestEnemy[2]), 2) + Math.pow((myPlayer.x-nearestEnemy[1]), 2)) < 300) {
            isEnemyNear = true;
            if(autoaim == false && myPlayer.hat != 7 && myPlayer.hat != 53) {
                normalHat = 6;
                if(primary != 8) {
                    normalAcc = 19
                }
            };
        }
    }
    if(isEnemyNear == false && autoaim == false) {
        normalAcc = 11;
        if (myPlayer.y < 2400){
            normalHat = 15;
        } else if (myPlayer.y > 6850 && myPlayer.y < 7550){
            normalHat = 31;
        } else {
	        normalHat = 12;
        }
    }
    if (!nearestEnemy) {
        nearestEnemyAngle = myPlayer.dir;
    }
    if(item == "h" && data[1] == myPlayer.id) {
        if(data[2] < 86 && data[2] > 0 && healToggle == 1) {
            setTimeout( () => {
                place(foodType, null);
                place(foodType, null);
            }, healSpeed);
        }
    }
    update();
}


function doNewSend(sender){
    ws.send(new Uint8Array(Array.from(msgpack5.encode(sender))));
}

function acc(id) {
    doNewSend(["13c", [0, 0, 1]]);
    doNewSend(["13c", [0, id, 1]]);
}

function hat(id) {
    doNewSend(["13c", [0, id, 0]]);
}


function place(id, angle = Math.atan2(mouseY - height / 2, mouseX - width / 2)) {
    doNewSend(["5", [id, null]]);
    doNewSend(["c", [1, angle]]);
    doNewSend(["c", [0, angle]]);
    doNewSend(["5", [myPlayer.weapon, true]]);
}

function boostSpike() {
    if(boostDir == null) {
        boostDir = nearestEnemyAngle;
    }
    place(spikeType, boostDir + toRad(90));
    place(spikeType, boostDir - toRad(90));
    place(boostType, boostDir);
    doNewSend(["33", [boostDir]]);
}


var repeater = function(key, action, interval) {
    let _isKeyDown = false;
    let _intervalId = undefined;

    return {
        start(keycode) {
            if(keycode == key && document.activeElement.id.toLowerCase() !== 'chatbox') {
                _isKeyDown = true;
                if(_intervalId === undefined) {
                    _intervalId = setInterval(() => {
                        action();
                        if(!_isKeyDown){
                            clearInterval(_intervalId);
                            _intervalId = undefined;
                            console.log("claered");
                        }
                    }, interval);
                }
            }
        },

        stop(keycode) {
            if(keycode == key && document.activeElement.id.toLowerCase() !== 'chatbox') {
                _isKeyDown = false;
            }
        }
    };


}

const healer = repeater(81, () => {place(foodType)}, 0);
const boostPlacer = repeater(70, () => {place(boostType)}, 0);
const spikePlacer = repeater(86, () => {place(spikeType)}, 0);
const millPlacer = repeater(78, () => {place(millType)}, 0);
const turretPlacer = repeater(72, () => {place(turretType)}, 0);
const boostSpiker = repeater(71, boostSpike, 0);

document.addEventListener('keydown', (e)=>{
    spikePlacer.start(e.keyCode);
    healer.start(e.keyCode);
    boostPlacer.start(e.keyCode);
    boostSpiker.start(e.keyCode);
    millPlacer.start(e.keyCode);
    turretPlacer.start(e.keyCode);

    if (e.keyCode == 79 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        for (let i=0;i<5;i++){
             let angle = myPlayer.dir + toRad(i * 72);
             place(millType, angle)
        }
    }
    if (e.keyCode == 80 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        for (let i=0;i<4;i++){
             let angle = myPlayer.dir + toRad(i * 90);
             place(wallType, angle)
        }
    }
    if (e.keyCode == 73 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        for (let i=0;i<4;i++){
             let angle = myPlayer.dir + toRad(i * 90);
             place(boostType, angle)
        }
    }
    if (e.keyCode == 186 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        for (let i=0;i<4;i++){
             let angle = myPlayer.dir + toRad(i * 90);
             place(spikeType, angle)
        }
    }
    if (e.keyCode == 72 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        place(turretType, myPlayer.dir + toRad(45));
        place(turretType, myPlayer.dir - toRad(45));
    }

    if (e.keyCode == 77 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        if (myPlayer.y < 2400){
            hat(15);
        } else if (myPlayer.y > 6850 && myPlayer.y < 7550){
            hat(31);
        } else {
	        hat(12);
        }
        acc(11);
    }
    if (e.keyCode == 85 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        hat(20);
    }

    if (e.keyCode == 89 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        hat(11);
        acc(21);
    }

    if (e.keyCode == 75 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        hat(53);
        acc(19);
    }

    if (e.keyCode == 221 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        hat(22);
        acc(19);
    }

    if (e.keyCode == 85 && document.activeElement.id.toLowerCase() !== 'chatbox') {
         hat(20);
         acc(13);
   }

    if (e.keyCode == 74 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        hat(7);
        acc(21);
    }

    if (e.keyCode == 84 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        hat(6);
        acc(16);
    }

    if(e.keyCode == 17 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["5"]);
        doNewSend(["13c", [0, 40, 0]]);
        place(boostType)
        doNewSend(["c", [1]]);
        setTimeout( () => {
            doNewSend(["13c", [0, 6, 0]]);
            doNewSend(["13c", [0, 12, 0]]);
        }, 110);
         setTimeout( () => {
             doNewSend(["c", [0, null]]);
         }, 200);
     }

    if(e.keyCode == 187 && document.activeElement.id.toLowerCase() !== 'chatbox') {

        doNewSend(["6", [5]]);
        doNewSend(["6", [17]]);
        doNewSend(["6", [31]]);
        doNewSend(["6", [23]]);
        doNewSend(["6", [9]]);
        doNewSend(["6", [38]]);
        doNewSend(["6", [28]]);
        doNewSend(["6", [15]]);
    }

    if(e.keyCode == 189 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["6", [3]]);
        doNewSend(["6", [17]]);
        doNewSend(["6", [31]]);
        doNewSend(["6", [23]]);
        doNewSend(["6", [10]]);
        doNewSend(["6", [33]]);
        doNewSend(["6", [4]]);
        doNewSend(["6", [25]]);

    }

    if(e.keyCode == 82 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        autoaim = true;
        doNewSend(["5", [primary, true]]);
        doNewSend(["13c", [0, 7, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [0, 21, 1]]);
        doNewSend(["c", [1]]);
        setTimeout( () => {
            doNewSend(["13c", [0, 53, 0]]);
            doNewSend(["5", [secondary, true]]);
        }, instaSpeed - 130);

        setTimeout( () => {
            doNewSend(["5", [primary, true]]);
            doNewSend(["c", [0, null]]);
            doNewSend(["13c", [0, 6, 0]]);
            autoaim = false;
        }, instaSpeed);
    }
    if(e.keyCode == 32 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        autoaim = true;
        doNewSend(["5", [primary, true]]);
        doNewSend(["13c", [0, 7, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [0, 19, 1]]);
        place(spikeType);
        doNewSend(["c", [1]]);

        setTimeout( () => {
            doNewSend(["13c", [0, 53, 0]]);
        }, 100);

        setTimeout( () => {
            doNewSend(["c", [0, null]]);
            doNewSend(["13c", [0, 6, 0]]);
            autoaim = false;
        }, 200);
    }

    if(e.keyCode == 38 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        messageToggle = (messageToggle + 1) % 2;
    }

    if(e.keyCode == 40 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        clanToggle = (clanToggle + 1) % 2;
    }

    if(e.keyCode == 220 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["ch", ['Trash Sever Mod : On']]);
        for (let i=0;i<4;i++){
            let angle = myPlayer.dir + toRad(i * 90);
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
                        place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
            place(millType, angle)
        }
    }

    if(e.keyCode == 106 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        healToggle = (healToggle + 1) % 2;
        if(healToggle == 0) {
            if(hatToggle == 0) {
                document.title = "Heal: OFF | Hat: OFF"
            } else {
                document.title = "Heal: OFF | Hat: ON"
            }
        } else {
            if(hatToggle == 0) {
                document.title = "Heal: ON | Hat: OFF"
            } else {
                document.title = "Heal: ON | Hat: ON"
            }
        }
    }
if (e.keyCode == 76 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        autoaim = true
        last = myPlayer.hat
        lastt = myPlayer.accessory
        doNewSend(["5", [secondary, true]]);
        doNewSend(["c", [1]]);
        doNewSend(["2", [nearestEnemyAngle]]);
        doNewSend(["13c", [0, 53, 0]]);
        doNewSend(["13c", [0, 19, 1]]);
        setTimeout(() => {
            doNewSend(["6", [12]]);
            doNewSend(["2", [nearestEnemyAngle]]);
        },100);
        setTimeout(() => {
            doNewSend(["6", [15]]);
            doNewSend(["2", [nearestEnemyAngle]]);
        },200);
        setTimeout(() => {
            doNewSend(["c", [null]]);
            doNewSend(["5", [primary, true]]);
            hat(last)
            acc(lastt)
            autoaim = false
        },300);
        setTimeout(() => {
            doNewSend(["2", [myPlayer.dir]]);
        },310);
    }
    let spikeSpeed;
    let trapSpeed;
    if(e.keyCode == 86 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        setTimeout( () => {
        place(spikeType)
            place(spikeType, myPlayer.dir + toRad(0));
        place(spikeType)
        }, spikeSpeed);
    }

    if(e.keyCode == 70 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        setTimeout( () => {
        place(boostType)
            place(boostType, myPlayer.dir + toRad(0));
        place(boostType)
        }, trapSpeed);
    }

    if(e.keyCode == 97 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["6", [4]]);
    }

    if(e.keyCode == 98 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["6", [15]]);
    }
    if(e.keyCode == 99 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["6", [28]]);
    }
    if(e.keyCode == 105 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["6", [28]]);
        doNewSend(["6", [25]]);
    }
    if(e.keyCode == 111 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        hatToggle = (hatToggle + 1) % 2;
        if(healToggle == 0) {
            if(hatToggle == 0) {
                document.title = "Heal : OFF | Hat : OFF"
            } else {
                document.title = "Heal : OFF | Hat : ON"
            }
        } else {
            if(hatToggle == 0) {
                document.title = "Heal : ON | Proe Af: OFF"
            } else {
                document.title = "Heal : ON | Hat : ON"
            }
        }
    }
})

document.addEventListener('keyup', (e)=>{
    spikePlacer.stop(e.keyCode);
    boostPlacer.stop(e.keyCode);
    boostSpiker.stop(e.keyCode);
    millPlacer.stop(e.keyCode);
    turretPlacer.stop(e.keyCode);
    healer.stop(e.keyCode);
    if(e.keyCode == 71 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        setTimeout( () => {
            doNewSend(["33", [null]]);
            boostDir = null;
        }, 10);
    }
})

function isElementVisible(e) {
    return (e.offsetParent !== null);
}


function toRad(angle) {
    return angle * 0.01745329251;
}

function dist(a, b){
    return Math.sqrt( Math.pow((b.y-a[2]), 2) + Math.pow((b.x-a[1]), 2) );
}


function animate(space, chance) {
    let result = '';
    let characters;
    if(space) {
        characters = '/_|Im DarKnesS All Die|_/';
    } else {
        characters = 'Meow'
    }
    if(space) {
        characters = characters.padStart((30 - characters.length) / 2 + characters.length)
        characters = characters.padEnd(30);
    }
    let count = 0;
    for (let i = 0; i < characters.length; i++ ) {
       if(Math.floor(Math.random() * chance) == 1 && characters.charAt(i) != "-" && count < 2 && characters.charAt(i) != " ") {
           result += " ";
           count++
       } else {
           result += characters.charAt(i);
       }
    }
    return result;
}

document.title = "Heal: ON | Hat: ON"

function update() {
    for (let i=0;i<9;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            primary = i;
        }
    }

    for (let i=9;i<16;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            secondary = i;
        }
    }

    for (let i=16;i<19;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            foodType = i - 16;
        }
    }

    for (let i=19;i<22;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            wallType = i - 16;
        }
    }

    for (let i=22;i<26;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            spikeType = i - 16;
        }
    }

    for (let i=26;i<29;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            millType = i - 16;
        }
    }

    for (let i=29;i<31;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            mineType = i - 16;
        }
    }

    for (let i=31;i<33;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            boostType = i - 16;
        }
    }

    for (let i=33;i<39;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString())) && i != 36){
            turretType = i - 16;
        }
    }

    spawnpadType = 36;
}


var ID_WinterCap = 15;
var ID_FlipperHat = 31;
var ID_MarksmanCap = 1;
var ID_BushGear = 10;
var ID_SoldierHelmet = 6;
var ID_AntiVenomGear = 23;
var ID_MusketeerHat = 32;
var ID_MedicGear = 13;
var ID_BullHelmet = 7;
var ID_EmpHelmet = 22;
var ID_BoosterHat = 12;
var ID_BarbarianArmor = 26;
var ID_BullMask = 46;
var ID_WindmillHat = 14;
var ID_SpikeGear = 11;
var ID_BushidoArmor = 16;
var ID_SamuraiArmor = 20;
var ID_ScavengerGear = 27;
var ID_TankGear = 40;
//Turret Gear. "Use if you want to"
var ID_TurretGear = 53;

// Keys

var TankGearKey = 90;
var BullHelmetKey = 74;
var SoldierHelmetKey = 71;
var TurretKey = 72;
var BoosterHatKey = 66;
var uneqiup = 16;
var SpikeGearKey = 89;
var BarabarianKey = 84;
var SpikeKey = 86
var EmpHelmet = 22;
// Remove all of the ads on the page.

try {
    document.getElementById("moomooio_728x90_home").style.display = "none";
    $("moomooio728x90_home").parent().css({display: "none"});
} catch (e) {
    console.log("There was an error removing the ads.");
}


var menuChange = document.createElement("div");
menuChange.className = "menuCard";
menuChange.id = "mainSettings";
menuChange.innerHTML = `
<div id="simpleModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <span class="closeBtn">&times;</span>
            <h2 style="font-size: 17px;">Hat Macro Settings</h2>
        </div>
        <div class="modal-body" style="font-size: 17px;">
            <div class="flexControl">
                <h3 style="color: red; font-size: 17px;">To unquip a hat press: LEFT SHIFT</h3>
                <h3 class="menuPrompt">Tank Gear: </h3> <input value="${String.fromCharCode(TankGearKey)}" id="tankGear" class="keyPressLow" onkeyup="this.value = this.value.toUpperCase();" maxlength="1" type="text"/>
                <h3 class="menuPrompt">Bull Helmet: </h3> <input value="${String.fromCharCode(BullHelmetKey)}" id="bullHelm" class="keyPressLow" onkeyup="this.value = this.value.toUpperCase();" maxlength="1" type="text"/>
                <h3 class="menuPrompt">Soldier Helmet: </h3> <input value="${String.fromCharCode(SoldierHelmetKey)}" id="soldier" class="keyPressLow"onkeyup="this.value = this.value.toUpperCase();"  maxlength="1" type="text"/>
                <h3 class="menuPrompt">Turret Gear: </h3> <input value="${String.fromCharCode(TurretKey)}" id="turret" class="keyPressLow" maxlength="1" onkeyup="this.value = this.value.toUpperCase();" type="text"/>
                <h3 class="menuPrompt">Booster Hat: </h3> <input value="${String.fromCharCode(BoosterHatKey)}" id="booster" class="keyPressLow" maxlength="1" onkeyup="this.value = this.value.toUpperCase();" type="text"/>
                <h3 class="menuPrompt">Spike Gear: </h3> <input value="${String.fromCharCode(SpikeGearKey)}" id="spikeg" class="keyPressLow" maxlength="1" onkeyup="this.value = this.value.toUpperCase();" type="text"/>
                <h3 class="menuPrompt">Barbarian Armor: </h3> <input value="${String.fromCharCode(BarabarianKey)}" id="barb" class="keyPressLow" onkeyup="this.value = this.value.toUpperCase();" maxlength="1" type="text"/>
                <hr>
                <h3 style="font-size: 17px;"> Map Settings </h3>

                <label class="container">Show biomes on the map
                    <input type="checkbox" id="myCheck">
                    <span class="checkmark"></span>
                </label>
            </div>
        </div>
        <div class="modal-footer">
            <h3 style="font-size: 17px;">Edit and live save your changes!</h3>
            <p>Make BY DarKnesS#7098 ! Dont share  !</p>
        </div>
    </div>
</div>
`
document.body.appendChild(menuChange)


$("#tankGear").on("input", () => {
    var cval = $("#tankGear").val();
    if (cval){
        TankGearKey = cval.toUpperCase();
        TankGearKey = TankGearKey.charCodeAt(0);
        console.log(TankGearKey);
    }
});

$("#bullHelm").on("input", () => {
    var cval = $("#bullHelm").val();
    if (cval){
        BullHelmetKey = cval.toUpperCase();
        BullHelmetKey = BullHelmetKey.charCodeAt(0);
        console.log(BullHelmetKey);
    }
});

$("#soldier").on("input", () => {
    var cval = $("#soldier").val();
    if (cval){
        SoldierHelmetKey = cval.toUpperCase();
        SoldierHelmetKey = SoldierHelmetKey.charCodeAt(0);
        console.log(SoldierHelmetKey);
    }
});

$("#turret").on("input", () => {
    var cval = $("#turret").val();
    if (cval){
        TurretKey = cval.toUpperCase();
        TurretKey = TurretKey.charCodeAt(0);
        console.log(TurretKey);
    }
});



$("#barb").on("input", () => {
    var cval = $("#barb").val();
    if (cval){
        BarabarianKey = cval.toUpperCase();
        BarabarianKey = BarabarianKey.charCodeAt(0);
        console.log(BarabarianKey);
    }
});

$("#booster").on("input", () => {
    var cval = $("#booster").val();
    if (cval){
        BoosterHatKey = cval.toUpperCase();
        BoosterHatKey = BoosterHatKey.charCodeAt(0);
        console.log(BoosterHatKey);
    }
});

$("#spikeg").on("input", () => {
    var cval = $("#spikeg").val();
    if (cval){
        SpikeGearKey = cval.toUpperCase();
        SpikeGearKey = SpikeGearKey.charCodeAt(0);
        console.log(SpikeGearKey);
    }
});

$("#trap").on("input", () => {
    var cval = $("#trap").val();
    if (cval){
        TrapKey = cval.toUpperCase();
        TrapKey = TrapKey.charCodeAt(0);
        console.log(TrapKey);
    }
});

var styleItem = document.createElement("style");
styleItem.type = "text/css";
styleItem.appendChild(document.createTextNode(`
.keyPressLow {
    margin-left: 8px;
    font-size: 16px;
    margin-right: 8px;
    height: 25px;
    width: 50px;
    background-color: #fcfcfc;
    border-radius: 3.5px;
    border: none;
    text-align: center;
    color: #4A4A4A;
    border: 0.5px solid #f2f2f2;
}

.menuPrompt {
    font-size: 17px;
    font-family: 'Hammersmith One';
    color: #4A4A4A;
    flex: 0.2;
    text-align: center;
    margin-top: 10px;
    display: inline-block;
}

.modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    overflow: auto;
    height: 100%;
    width: 100%;
}

.modal-content {
    margin: 10% auto;
    width: 40%;
    box-shadow: 0 5px 8px 0 rgba(0, 0, 0, 0.2), 0 7px 20px 0 rgba(0, 0, 0, 0.17);
    font-size: 14px;
    line-height: 1.6;
}

.modal-header h2,
.modal-footer h3 {
  margin: 0;
}

.modal-header {
    background: #428bca;
    padding: 15px;
    color: #fff;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
}

.modal-body {
    padding: 10px 20px;
    background: #fff;
}

.modal-footer {
    background: #428bca;
    padding: 10px;
    color: #fff;
    text-align: center;
    border-bottom-left-radius: 5px;
    border-bottom-right-radius: 5px;
}

.closeBtn {
    color: #ccc;
    float: right;
    font-size: 30px;
    color: #fff;
}

.closeBtn:hover,
.closeBtn:focus {
    color: #000;
    text-decoration: none;
    cursor: pointer;
}

/* Customize the label (the container) */
.container {
  display: block;
  position: relative;
  padding-left: 35px;
  margin-bottom: 12px;
  cursor: pointer;
  font-size: 16px;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

/* Hide the browser's default checkbox */
.container input {
  position: absolute;
  opacity: 0;
  cursor: pointer;
  height: 0;
  width: 0;
}

/* Create a custom checkbox */
.checkmark {
  position: absolute;
  top: 0;
  left: 0;
  height: 25px;
  width: 25px;
  background-color: #eee;
}

/* On mouse-over, add a grey background color */
.container:hover input ~ .checkmark {
  background-color: #ccc;
}

/* When the checkbox is checked, add a blue background */
.container input:checked ~ .checkmark {
  background-color: #2196F3;
}

/* Create the checkmark/indicator (hidden when not checked) */
.checkmark:after {
  content: "";
  position: absolute;
  display: none;
}

/* Show the checkmark when checked */
.container input:checked ~ .checkmark:after {
  display: block;
}

/* Style the checkmark/indicator */
.container .checkmark:after {
  left: 9px;
  top: 5px;
  width: 5px;
  height: 10px;
  border: solid white;
  border-width: 0 3px 3px 0;
  -webkit-transform: rotate(45deg);
  -ms-transform: rotate(45deg);
  transform: rotate(45deg);
}

`))
document.head.appendChild(styleItem);


$("#adCard").css({display: "none"});


document.addEventListener('keydown', function(e) {
    if (e.keyCode == uneqiup && document.activeElement.id.toLowerCase() !== 'chatbox'){
        console.log("done")
        storeEquip(0);
    } else if (e.keyCode == 27){
        if (modal.style.display = "none") {
            modal.style.display = "block";
        } else {
            modal.style.display = "none";
        }
    } else if (e.keyCode == TankGearKey && document.activeElement.id.toLowerCase() !== 'chatbox'){
        storeEquip(ID_TankGear);
    } else if (e.keyCode == SoldierHelmetKey && document.activeElement.id.toLowerCase() !== 'chatbox'){
        storeEquip(ID_SoldierHelmet);
    } else if (e.keyCode == BullHelmetKey && document.activeElement.id.toLowerCase() !== 'chatbox'){
        storeEquip(ID_BullHelmet);
    } else if (e.keyCode == BoosterHatKey && document.activeElement.id.toLowerCase() !== 'chatbox'){
        storeEquip(ID_BoosterHat);
    } else if (e.keyCode == BarabarianKey && document.activeElement.id.toLowerCase() !== 'chatbox'){
        storeEquip(ID_BarbarianArmor);
    } else if (e.keyCode == SpikeGearKey && document.activeElement.id.toLowerCase() !== 'chatbox'){
        storeEquip(ID_SpikeGear);
    } else if (e.keyCode == TurretKey && document.activeElement.id.toLowerCase() !== 'chatbox'){
        storeEquip(ID_TurretGear);
    }
})

// Get modal element
var modal = document.getElementById("simpleModal");
// Get close button
var closeBtn = document.getElementsByClassName('closeBtn')[0];

// Events
closeBtn.addEventListener('click', closeModal);
window.addEventListener('click', outsideClick);

// Close
function closeModal() {
  modal.style.display = 'none';
}

// Close If Outside Click
function outsideClick(e) {
  if (e.target == modal) {
    modal.style.display = 'none';
  }
}

var checkbox = document.querySelector("#myCheck")

checkbox.addEventListener('change', function() {
    if (this.checked) {
        $("#mapDisplay").css({background: `url('https://i.imgur.com/fgFsQJp.png')`});
        console.log('checked')
    } else {
        $("#mapDisplay").css({background: `rgba(0, 0, 0, 0.25)`})
        console.log('unchecked')
    }
})

// ==UserScript==
// @name         This is a basic script, just visual moomoo.io changes.
// @namespace    This is a basic script, just visual moomoo.io changes.
// @version      1.1.1
// @match        *://*.moomoo.io/*
// @match        *://dev.moomoo.io/*
// @description  A few changes.
// @author       Meow_Meow
// @match        *://sandbox.moomoo.io/*
// @grant        none
// ==/UserScript==


document.getElementById("gameName").style.color = "#99aaff";
document.getElementById("setupCard").style.color = "green";
    document.getElementById("leaderboard").append('Smok Mod');
    document.getElementById("leaderboard").style.color = "#b30000";
document.getElementById("allianceButton").style.color = "#b30000";
document.getElementById("chatButton").style.color = "white";
document.getElementById("storeButton").style.color = "white";

document.getElementById("scoreDisplay").style.color = "white";
document.getElementById("woodDisplay").style.color = "white";
document.getElementById("stoneDisplay").style.color = "blue";
document.getElementById("killCounter").style.color = "white";
document.getElementById("foodDisplay").style.color = "";
document.getElementById("diedText").style.color = "white";
document.getElementById("diedText").append('Trash Loveable!');


document.getElementById("actionBarItem15").style.backgroundColor = "black";
document.getElementById("actionBarItem18").style.backgroundColor = "black";
document.getElementById("actionBarItem21").style.backgroundColor = "black";
document.getElementById("actionBarItem0").style.backgroundColor = "black";
document.getElementById("actionBarItem25").style.backgroundColor = "black";
document.getElementById("mainMenu").style.backgroundColor = "#000080";

alert("Script Loaded.");
document.getElementById("enterGame").style.color = "white";
document.getElementById("enterGame").style.color = "white";
alert("Script Loaded.");
alert("Script Loaded.");
document.getElementById("pingDisplay").remove();
document.getElementById("mapDisplay").style.backgroundColor = "#ff000040";
document.getElementById("ageText").style.color = "white";
document.getElementById("linksContainer2").innerHTML = "Smoks";

(function() {
	'use strict';

	var conf = {
		'radar': {
			'color': '#ffffff',
			'w': '20',
			'h': '20'
		},
		'maxScreenWidth': 1920,
		'maxScreenHeight': 1080
	};

	var SID;
	var socket;
	var player_x = 0;
	var player_y = 0;
	var player_team = null;
	var user = [];

	setTimeout(function () {
		var c = setInterval(function () {
			if (typeof io !== 'undefined' && io !== null) {
				if (typeof storeBuy === 'function' && typeof Object.keys(io.managers) [0] !== 'undefined') {
					socket = io.managers[Object.keys(io.managers) [0]].nsps['/'];
					socket.on('1', function (e) {
						SID = e;
					});
					socket.on('2', function (e, t) {
						if (!t) user.push([e[0], e[1], e[2], 0, 0, null]);
					});
					socket.on('4', function (e) {
						removeUserID(e);
					});
					socket.on('13', function (e) {
						removeUserSID(e);
					});
					socket.on('3', function (e) {
						for (var i = 0; i < user.length; i++) {
							$('#enemyradar' + user[i][1]).css({ 'display': 'none' });
						}
						for (var t = 0; t < e.length; t += 8) {
							if (e[t] == SID) {
								player_x = e[t + 1];
								player_y = e[t + 2];
								player_team = e[t + 6];
							} else {
								addUser(e[t], e[t + 1], e[t + 2], e[t + 6]);
							}
						}
					});
					clearInterval(c);
				}
			}
		}, 200);
	}, 1000);

	function addUser(sid, x, y, team) {
		for (var i = 0; i < user.length; i++) {
			if (user[i][1] === sid) {
				user[i][3] = x;
				user[i][4] = y;
				user[i][5] = team;
				break;
			}
		}
		if (!$('#enemyradar' + sid).length) {
			$(document.body).append('<div id="enemyradar' + sid + '" style="' +
					'display: none;' +
					'position: absolute;' +
					'left: 0;' +
					'top: 0;' +
					'color: #ffffff;' +
					'width: 0;' +
					'height: 0;' +
					'border-style: solid;' +
					'border-width: 10px 0 10px 20px;' +
					'border-color: transparent transparent transparent ' + conf.radar.color + ';' +
				'"></div>');
		}
		var center_x = window.innerWidth / 2;
		var center_y = window.innerHeight / 2;
		var rad = getRadian(player_x, player_y, x, y);
		var per = getDistance(0, 0, (player_x - x), (player_y - y) * (16 / 9)) * 100 / (conf.maxScreenHeight / 2);
		var alpha = per / center_y;
		if (alpha > 1.0) alpha = 1.0;
		var dis = center_y * alpha;
		var tx = center_x + dis * Math.cos(rad) - conf.radar.w / 2;
		var ty = center_y + dis * Math.sin(rad) - conf.radar.h / 2;
		$('#enemyradar' + sid).css({
			'left': tx + 'px',
			'top': ty + 'px',
			'display': ((player_team === null || player_team !== team) ? 'block' : 'none'),
			'opacity': alpha,
			'transform': 'rotate(' + RtoD(rad) + 'deg)'
		});
	}

	function removeUserID(id) {
		for (var i = 0; i < user.length; i++) {
			if (user[i][0] == id) {
				$('#enemyradar' + user[i][1]).remove();
				user.splice(i, 1);
				break;
			}
		}
	}

	function removeUserSID(sid) {
		for (var i = 0; i < user.length; i++) {
			if (user[i][1] == sid) {
				$('#enemyradar' + user[i][1]).remove();
				user.splice(i, 1);
				break;
			}
		}
	}

	function getRadian(x1, y1, x2, y2) {
		return Math.atan2(y2 - y1, x2 - x1);
	}
	function getDistance(x1, y1, x2, y2) {
		return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
	}
	function RtoD(r) {
		return r * 180 / Math.PI;
	}
	function DtoR(d) {
		return d * Math.PI / 180;
	}
})();

(function() {
    'use strict';

    // Your code here...
})();

try {
    window.admob = {
        requestInterstitialAd: ()=>{},
        showInterstitialAd: ()=>{}
    }
} catch (e) {
    console.warn(e)
    //adblock and ecc.
}
document.getElementById("twitterFollow").remove();
document.getElementById("youtubeFollow").remove();
document.getElementById("followText").innerHTML = "Follow Meow Meow!"
document.getElementById("followText").style = "bottom: -0px;"
document.getElementById("storeHolder").style = "height: 1500px; width: 450px;";
document.getElementById('adCard').remove();
document.getElementById('errorNotification').remove();
document.getElementById("gameName").style.color = "#ffe6e6";
document.getElementById("setupCard").style.color = "#999966";
document.getElementById("gameName").innerHTML = "SmokMod";
document.getElementById("promoImg").remove();
document.getElementById("promoImgHolder").remove();
document.getElementById("featuredYoutube").remove();
$("#moomooio_728x90_home").parent().css({display: "none"});
document.getElementById("youtuberOf").remove();
document.getElementById("linkContainer2").remove();// ==UserScript==
// @name         New Userscript
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  try to take over the world!
// @author       You
// @match        https://www.tampermonkey.net/index.php?version=4.10&ext=dhdg&updated=true
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Your code here...
})();// ==UserScript==
// @name         New Userscript
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  try to take over the world!
// @author       You
// @match        http://*/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Your code here...
})();// ==UserScript==
// @name         New Userscript
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  try to take over the world!
// @author       You
// @match        http://*/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Your code here...
})();// ==UserScript==
// @name         New Userscript
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  try to take over the world!
// @author       You
// @match        http://*/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Your code here...
})();// ==UserScript==
// @name         New Userscript
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  try to take over the world!
// @author       You
// @match        https://discord.com/channels/745784730762346586/761472641126367252
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Your code here...
})();